services:
  team-selection:
    image: sawwere/teamselection
    networks:
      - backend
    volumes:
      - './resources:/resources'
    container_name: 'team-selection'
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://team-selection-postgres:5432/team-selection
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET}
      AZURE_TENANT_ID: ${AZURE_TENANT_ID}
      AZURE_ISSUER_URL: ${AZURE_ISSUER_URL}
    logging:
      options:
        max-size: "10m"
        max-file: "10"
  postgres:
    image: 'postgres:16.0'
    container_name: 'team-selection-postgres'
    environment:
      POSTGRES_DB: team-selection
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      PGUSER: ${POSTGRES_USER}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    expose:
      - 5432
    ports:
      - '15433:5432'
    networks:
      - backend
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "21811:2181"
    volumes:
      - zookeeper:/var/lib/zookeeper/data
    networks:
      - backend
  kafka:
    image: confluentinc/cp-kafka:7.0.0
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - backend
  grafana:
    image: grafana/grafana:10.4.2
    restart: on-failure
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - backend
  prometheus:
    image: prom/prometheus:v2.51.2
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      backend:
        ipv4_address: 10.5.0.55
    depends_on:
      - team-selection
volumes:
  postgresql: { }
  kafka: { }
  zookeeper: { }
  prometheus_data:
networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1
