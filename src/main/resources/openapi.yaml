openapi: 3.0.1
info:
  title: TeamSelection Api
  description: 'Api приложения для поиска команд для проектной деятельности '
  version: 0.0.1
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: ProjectType
    description: API для операций с типами проектов
  - name: ApplicationController
    description: API для работы с заявками
  - name: UserController
    description: API для работы со пользователями
  - name: StudentController
    description: API для работы со студентами
  - name: Technology
    description: API для взаимодействия с возможными технологиями студентов и проектов
  - name: Track
    description: API для работы со треками
  - name: TeamController
    description: API для работы с командами
paths:
  /api/v1/students/{id}:
    get:
      tags:
        - StudentController
      summary: Получение студента по его id
      operationId: findStudentById
      parameters:
        - name: id
          in: path
          description: Id студента
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/StudentDto'
    put:
      tags:
        - StudentController
      summary: Изменить данные студента
      description: |
        Используется для модификации данных определенного пользователя.

        Эта операция может быть выполнена самим пользователем (редактирование информации о себе),
        либо администратором ресурса.

        Недоступные для обновления поля будут проигнорированы.

        ВНИМАНИЕ: Список обновляемых полей отличается от того, кто отправил запрос -
        администратору доступны для изменения все поля, включая те, что зависят от состояния других таблиц,
        поэтому редактировать их нужно ОСТОРОЖНО.
      operationId: updateStudent
      parameters:
        - name: id
          in: path
          description: Id студента
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Сущность студента
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentUpdateDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
    delete:
      tags:
        - StudentController
      summary: Удалить студента по его id
      description: |
        Используется для удаления определенного студента (но не соответствующего ему пользователя!).

        Эта операция может быть выполнена только администратором ресурса.
      operationId: deleteStudent
      parameters:
        - name: id
          in: path
          description: Id студента
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
  /api/v1/students:
    get:
      tags:
        - StudentController
      summary: Получение списка всех студентов за все время
      operationId: findAllStudents
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentDto'
    post:
      tags:
        - StudentController
      summary: Создание студента
      operationId: createStudent
      requestBody:
        description: Сущность студента
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentCreationDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/StudentDto'
  /api/v1/students/{id}/teams:
    get:
      tags:
        - StudentController
      summary: Найти все команды, в которых когда либо состоял студент
      operationId: getTeamHistory
      parameters:
        - name: id
          in: path
          description: Id студента
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamDto'
#  /api/v1/students/search:
#    get:
#      tags:
#        - StudentController
#      summary: Поиск студентов с фильтрацией по полям
#      operationId: searchStudents
#      parameters:
#        - name: input
#          in: query
#          description: строка из поиска, разделенная пробелами
#          required: false
#          example: "Петров"
#          schema:
#            type: string
#        - name: course
#          in: query
#          description: Курс обучения студента
#          required: false
#          schema:
#            type: integer
#            format: int32
#        - name: group_number
#          in: query
#          description: Номер группы студента
#          required: false
#          schema:
#            type: integer
#            format: int32
#        - name: track_id
#          in: query
#          description: Айди трека
#          required: false
#          schema:
#            type: integer
#            format: int64
#        - name: has_team
#          in: query
#          description: Состоит ли в команде
#          required: false
#          schema:
#            type: boolean
#        - name: is_captain
#          in: query
#          required: false
#          schema:
#            type: boolean
#        - name: technologies
#          in: query
#          description: Список технологий(умений) студента
#          required: false
#          schema:
#            type: array
#            items:
#              type: integer
#              format: int64
#        - name: page
#          in: query
#          description: Номер страницы
#          example: "0"
#          required: false
#          schema:
#            type: integer
#            format: int32
#            default: 0
#        - name: size
#          in: query
#          description: Размер страницы
#          example: "10"
#          required: false
#          schema:
#            type: integer
#            format: int32
#            default: 10
#        - name: sort
#          in: query
#          description: Сортировка (field,asc|desc)
#          example: "name,asc"
#          required: false
#          schema:
#            type: string
#            default: "name,asc"
#      responses:
#        '200':
#          description: Paginated students response
#          content:
#            application/json:
#              schema:
#                allOf:
#                  - $ref: '#/components/schemas/PageResponse1'
#                  - type: object
#                    properties:
#                      content:
#                        type: array
#                        items:
#                          $ref: '#/components/schemas/StudentDto'
  /api/v1/students/me:
    get:
      tags:
        - StudentController
      operationId: getCurrentStudentId
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: integer
                format: int64
  /api/v1/students/filters:
    get:
      tags:
        - StudentController
      summary: Получение списка возможных опций для поиска среди студентов
      operationId: getSearchOptionsStudents
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/StudentSearchOptionsDto'
  /api/v1/projectTypes:
    get:
      tags:
        - ProjectType
      summary: Получение списка всех возможных типов проектов
      operationId: findAllProjectTypes
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectTypeDto'
    post:
      tags:
        - ProjectType
      summary: Создание нового типа проекта
      operationId: createProjectType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectTypeDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProjectTypeDto'
  /api/v1/projectTypes/{id}:
    delete:
      tags:
        - ProjectType
      summary: Удаление типа проекта
      operationId: deleteProjectType
      parameters:
        - name: id
          in: path
          description: Id типа проекта
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: string
  /api/v1/technologies:
    get:
      tags:
        - Technology
      summary: Получение списка всех технологий
      operationId: findAllTechnologies
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TechnologyDto'
    post:
      tags:
        - Technology
      summary: Создание новой технологии
      operationId: createTechnology
      requestBody:
        description: Сущность технологии
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TechnologyDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TechnologyDto'
  /api/v1/technologies/{id}:
    delete:
      tags:
        - Technology
      summary: Удаление технологии
      operationId: deleteTechnology
      parameters:
        - name: id
          in: path
          description: Id технологии
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: string
  /api/v1/tracks:
    get:
      tags:
        - Track
      summary: 'Получение списка всех треков'
      operationId: findAllTracks
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackDto'
    post:
      tags:
        - Track
      summary: Создание трека
      operationId: createTrack
      requestBody:
        description: Сущность трека
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackCreationDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TrackDto'
  /api/v1/tracks/{trackId}:
    get:
      tags:
        - Track
      summary: 'Получение трека по его id'
      operationId: findTrackById
      parameters:
        - name: trackId
          in: path
          description: id трека
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TrackDto'
    put:
      tags:
        - Track
      summary: Изменить данные трека
      description: |
        Используется для модификации данных определенного трека.

        Эта операция может быть выполнена только администратором ресурса.
      operationId: updateTrack
      parameters:
        - name: trackId
          in: path
          description: Id трека
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Сущность трека
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDto'
    delete:
      tags:
        - Track
      summary: Удалить трек по его id
      description: |
        Используется для удаления определенного трека.

        Эта операция может быть выполнена только администратором ресурса.
      operationId: deleteTrack
      parameters:
        - name: trackId
          in: path
          description: Id трека
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
components:
  schemas:
    StudentUpdateDto:
      type: object
      required:
        - course
        - group_number
        - current_track
        - user
      properties:
        course:
          type: integer
          format: int32
          minimum: 1
          maximum: 10
          description: Текущий курс студента
          example: 3
        group_number:
          type: integer
          format: int32
          minimum: 0
          maximum: 20
          description: Номер группы
          example: 5
        about_self:
          type: string
          maxLength: 1024
          description: Информация о себе
          example: "Увлекаюсь программированием и игрой на гитаре"
          nullable: true
        contacts:
          type: string
          maxLength: 255
          description: Контактная информация
          example: "tg: @student_profile"
          nullable: true
        current_team:
          $ref: '#/components/schemas/StudentUpdateTeamDto'
          nullable: true
        current_track:
          $ref: '#/components/schemas/StudentUpdateTrackDto'
        user:
          $ref: '#/components/schemas/StudentUpdateUserDto'
        technologies:
          type: array
          items:
            $ref: '#/components/schemas/TechnologyDto'
    StudentUpdateTeamDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID команды
          example: 42
      required:
        - id
    StudentUpdateTrackDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID трека обучения
          example: 15
      required:
        - id
    StudentUpdateUserDto:
      type: object
      required:
        - fio
        - email
        - role
        - is_remind_enabled
        - is_enabled
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID пользователя
          example: 123
          nullable: true
        fio:
          type: string
          minLength: 1
          description: ФИО студента
          example: "Иванов Иван Иванович"
        email:
          type: string
          minLength: 1
          format: email
          description: Email студента
          example: "student@university.edu"
        role:
          type: string
          minLength: 1
          description: Роль пользователя
          example: "STUDENT"
        is_remind_enabled:
          type: boolean
          description: Включены ли уведомления
          example: true
        is_enabled:
          type: boolean
          description: Активен ли аккаунт
          example: true
    ProjectTypeDto:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID типа проекта
          example: 123
          nullable: true
        name:
          type: string
          minLength: 1
          maxLength: 32
          description: Название типа проекта
          example: "Mobile"
    TechnologyDto:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID технологии
          example: 123
          nullable: true
        name:
          type: string
          minLength: 1
          description: Название технологии
          example: "C++"

